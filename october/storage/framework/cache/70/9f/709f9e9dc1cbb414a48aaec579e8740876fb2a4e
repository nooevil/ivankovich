1608943569a:1:{s:11:"catalog.htm";a:13:{s:8:"fileName";s:11:"catalog.htm";s:7:"content";s:6049:"title = "Catalog"
url = "/:main_category/:category?"
layout = "main"
is_hidden = 0

[CategoryPage]
slug = "{{ :category }}"
slug_required = 0
smart_url_check = 1
has_wildcard = 0
skip_error = 0

[Pagination]
count_per_page = 15
pagination_limit = 5
active_class = "pagination__link_current"
button_list = "first,first-more,main,last-more,last"
first_button_name = "First"
first_button_limit = 3
first_button_number = 1
first-more_button_name = "..."
first-more_button_limit = 4
prev_button_name = "Prev"
prev_button_limit = 1
prev-more_button_name = "..."
prev-more_button_limit = 1
next-more_button_name = "..."
next-more_button_limit = 1
next_button_name = "Next"
next_button_limit = 1
last-more_button_name = "..."
last-more_button_limit = 4
last_button_name = "Last"
last_button_limit = 3
last_button_number = 1

[BrandList]

[CategoryPage MainCategoryPage]
slug = "{{ :main_category }}"
slug_required = 1
smart_url_check = 0
has_wildcard = 0
skip_error = 0
==
<?php
function onStart()
{
    $this['path_page_js'] = mix('js/catalog.js', 'themes/lovata-shopaholic-sneakers/assets');
    $this['path_page_css'] = mix('css/catalog.css', 'themes/lovata-shopaholic-sneakers/assets');
}

function onInit()
{
    //Get category object
    $obCategory = $this->CategoryPage->get();
    if (empty($obCategory)) {
        $obMainCategory = $this->MainCategoryPage->get();
        //dd($obMainCategory);
        if (empty($obMainCategory)) {
            return;
        } else {
            $obCategory = $obMainCategory;
        }
    }
    

    //Get active sorting and page number
    $sActiveSorting = $this->ProductList->getSorting();
    $iPage = $this->Pagination->getPageFromRequest();

    //Get brand list
    $obBrandList = $this->BrandList->make()->sort()->active()->category($obCategory->id);

    $bSaleFilter = (bool) input('sale');

    //Get filter by brand from request
    $arFilterBrandList = explode('|', input('brand'));
    $arFilterBrandIDList = [];

    //Get brand ID list for filter
    if (!empty($arFilterBrandList)) {
        foreach($obBrandList as $obBrand) {
            if (in_array($obBrand->slug, $arFilterBrandList)) {
                $arFilterBrandIDList[] = $obBrand->id;
            }
        }
    }

    //Get price filter
    $arPriceFilterValue = explode('|', input('price'));
    $fMinPriceFilterValue = array_get($arPriceFilterValue, 0);
    $fMaxPriceFilterValue = array_get($arPriceFilterValue, 1);

    //Get filter by properties
    $arFilterValue = (array) input('property');
    if (!empty($arFilterValue)) {
        foreach($arFilterValue as $sKey => &$sValue) {
            $sValue = explode('|', $sValue);
        }
    }

    $arFilterValueWithoutProperty = [];

    //Get product list with filter by category
    $obCategoryProductList = $this->ProductList->make()->active()->sort($sActiveSorting)->category($obCategory->id);

    //Get property list for filter panel
    $obProductPropertyList = $obCategory->product_filter_property;
    $obOfferPropertyList = $obCategory->offer_filter_property;

    foreach($obProductPropertyList->getIDList() as $iPropertyID) {
        $arFilterValueTemp = $arFilterValue;
        if (isset($arFilterValueTemp[$iPropertyID])) {
            unset($arFilterValueTemp[$iPropertyID]);
        }

        $arFilterValueWithoutProperty[$iPropertyID] = $arFilterValueTemp;
    }

    foreach($obOfferPropertyList->getIDList() as $iPropertyID) {
        $arFilterValueTemp = $arFilterValue;
        if (isset($arFilterValueTemp[$iPropertyID])) {
        unset($arFilterValueTemp[$iPropertyID]);
        }

        $arFilterValueWithoutProperty[$iPropertyID] = $arFilterValueTemp;
    }

    //Get product list with filter by brands and properties
    $obFilteredProductList = $obCategoryProductList->copy()->filterByBrandList($arFilterBrandIDList)->filterByPrice($fMinPriceFilterValue, $fMaxPriceFilterValue);
    if ($bSaleFilter) {
        $obFilteredProductList->filterByDiscount();
    }

    $obProductList = $obFilteredProductList->copy()
        ->filterByProperty($arFilterValue, $obProductPropertyList)
        ->filterByProperty($arFilterValue, $obOfferPropertyList);

    //Get product list for page
    $arProductList = $obProductList->page($iPage, $this->Pagination->getCountPerPage());

    //Get offers with min/max prices
    $obOfferMinPrice = $obCategoryProductList->getOfferMinPrice();
    $obOfferMaxPrice = $obCategoryProductList->getOfferMaxPrice();

    //Get max page number
    $iMaxPage = $this->Pagination->getMaxPage($obProductList->count());

    //Init template variables
    $this['obCategory'] = $obCategory;
    $this['obBrandList'] = $obBrandList;

    $this['obProductPropertyList'] = $obProductPropertyList;
    $this['obOfferPropertyList'] = $obOfferPropertyList;
    $this['arFilterValue'] = $arFilterValue;
    $this['arFilterValueWithoutProperty'] = $arFilterValueWithoutProperty;

    $this['arFilterBrandIDList'] = $arFilterBrandIDList;
    $this['fMinPriceFilterValue'] = $fMinPriceFilterValue;
    $this['fMaxPriceFilterValue'] = $fMaxPriceFilterValue;
    $this['obOfferMinPrice'] = $obOfferMinPrice;
    $this['obOfferMaxPrice'] = $obOfferMaxPrice;
    $this['bSaleFilter'] = $bSaleFilter;

    $this['sActiveSorting'] = $sActiveSorting;
    $this['iMaxPage'] = $iMaxPage;
    $this['iPage'] = $iPage;
    $this['obCategoryProductList'] = $obCategoryProductList;
    $this['obFilteredProductList'] = $obFilteredProductList;
    $this['obProductList'] = $obProductList;
    $this['arProductList'] = $arProductList;
}
?>
==
{% put page_style %}
    <link rel="stylesheet" href="{{ path_page_css }}">
{% endput %}
{% put page_script %}
    <script src="{{ path_page_js }}"></script>
{% endput %}

{% set arSEOParams = {'category': obCategory} %}

{% put seo_tags %}
    {% component 'SeoToolbox' model=obCategory params=arSEOParams %}
{% endput %}
{% partial 'product/catalog/catalog' %}";s:5:"mtime";i:1607544816;s:6:"markup";s:374:"{% put page_style %}
    <link rel="stylesheet" href="{{ path_page_css }}">
{% endput %}
{% put page_script %}
    <script src="{{ path_page_js }}"></script>
{% endput %}

{% set arSEOParams = {'category': obCategory} %}

{% put seo_tags %}
    {% component 'SeoToolbox' model=obCategory params=arSEOParams %}
{% endput %}
{% partial 'product/catalog/catalog' %}";s:4:"code";s:4697:"function onStart()
{
    $this['path_page_js'] = mix('js/catalog.js', 'themes/lovata-shopaholic-sneakers/assets');
    $this['path_page_css'] = mix('css/catalog.css', 'themes/lovata-shopaholic-sneakers/assets');
}

function onInit()
{
    //Get category object
    $obCategory = $this->CategoryPage->get();
    if (empty($obCategory)) {
        $obMainCategory = $this->MainCategoryPage->get();
        //dd($obMainCategory);
        if (empty($obMainCategory)) {
            return;
        } else {
            $obCategory = $obMainCategory;
        }
    }
    

    //Get active sorting and page number
    $sActiveSorting = $this->ProductList->getSorting();
    $iPage = $this->Pagination->getPageFromRequest();

    //Get brand list
    $obBrandList = $this->BrandList->make()->sort()->active()->category($obCategory->id);

    $bSaleFilter = (bool) input('sale');

    //Get filter by brand from request
    $arFilterBrandList = explode('|', input('brand'));
    $arFilterBrandIDList = [];

    //Get brand ID list for filter
    if (!empty($arFilterBrandList)) {
        foreach($obBrandList as $obBrand) {
            if (in_array($obBrand->slug, $arFilterBrandList)) {
                $arFilterBrandIDList[] = $obBrand->id;
            }
        }
    }

    //Get price filter
    $arPriceFilterValue = explode('|', input('price'));
    $fMinPriceFilterValue = array_get($arPriceFilterValue, 0);
    $fMaxPriceFilterValue = array_get($arPriceFilterValue, 1);

    //Get filter by properties
    $arFilterValue = (array) input('property');
    if (!empty($arFilterValue)) {
        foreach($arFilterValue as $sKey => &$sValue) {
            $sValue = explode('|', $sValue);
        }
    }

    $arFilterValueWithoutProperty = [];

    //Get product list with filter by category
    $obCategoryProductList = $this->ProductList->make()->active()->sort($sActiveSorting)->category($obCategory->id);

    //Get property list for filter panel
    $obProductPropertyList = $obCategory->product_filter_property;
    $obOfferPropertyList = $obCategory->offer_filter_property;

    foreach($obProductPropertyList->getIDList() as $iPropertyID) {
        $arFilterValueTemp = $arFilterValue;
        if (isset($arFilterValueTemp[$iPropertyID])) {
            unset($arFilterValueTemp[$iPropertyID]);
        }

        $arFilterValueWithoutProperty[$iPropertyID] = $arFilterValueTemp;
    }

    foreach($obOfferPropertyList->getIDList() as $iPropertyID) {
        $arFilterValueTemp = $arFilterValue;
        if (isset($arFilterValueTemp[$iPropertyID])) {
        unset($arFilterValueTemp[$iPropertyID]);
        }

        $arFilterValueWithoutProperty[$iPropertyID] = $arFilterValueTemp;
    }

    //Get product list with filter by brands and properties
    $obFilteredProductList = $obCategoryProductList->copy()->filterByBrandList($arFilterBrandIDList)->filterByPrice($fMinPriceFilterValue, $fMaxPriceFilterValue);
    if ($bSaleFilter) {
        $obFilteredProductList->filterByDiscount();
    }

    $obProductList = $obFilteredProductList->copy()
        ->filterByProperty($arFilterValue, $obProductPropertyList)
        ->filterByProperty($arFilterValue, $obOfferPropertyList);

    //Get product list for page
    $arProductList = $obProductList->page($iPage, $this->Pagination->getCountPerPage());

    //Get offers with min/max prices
    $obOfferMinPrice = $obCategoryProductList->getOfferMinPrice();
    $obOfferMaxPrice = $obCategoryProductList->getOfferMaxPrice();

    //Get max page number
    $iMaxPage = $this->Pagination->getMaxPage($obProductList->count());

    //Init template variables
    $this['obCategory'] = $obCategory;
    $this['obBrandList'] = $obBrandList;

    $this['obProductPropertyList'] = $obProductPropertyList;
    $this['obOfferPropertyList'] = $obOfferPropertyList;
    $this['arFilterValue'] = $arFilterValue;
    $this['arFilterValueWithoutProperty'] = $arFilterValueWithoutProperty;

    $this['arFilterBrandIDList'] = $arFilterBrandIDList;
    $this['fMinPriceFilterValue'] = $fMinPriceFilterValue;
    $this['fMaxPriceFilterValue'] = $fMaxPriceFilterValue;
    $this['obOfferMinPrice'] = $obOfferMinPrice;
    $this['obOfferMaxPrice'] = $obOfferMaxPrice;
    $this['bSaleFilter'] = $bSaleFilter;

    $this['sActiveSorting'] = $sActiveSorting;
    $this['iMaxPage'] = $iMaxPage;
    $this['iPage'] = $iPage;
    $this['obCategoryProductList'] = $obCategoryProductList;
    $this['obFilteredProductList'] = $obFilteredProductList;
    $this['obProductList'] = $obProductList;
    $this['arProductList'] = $arProductList;
}";s:5:"title";s:7:"Catalog";s:3:"url";s:26:"/:main_category/:category?";s:6:"layout";s:4:"main";s:9:"is_hidden";s:1:"0";s:12:"CategoryPage";a:5:{s:4:"slug";s:15:"{{ :category }}";s:13:"slug_required";s:1:"0";s:15:"smart_url_check";s:1:"1";s:12:"has_wildcard";s:1:"0";s:10:"skip_error";s:1:"0";}s:10:"Pagination";a:22:{s:14:"count_per_page";s:2:"15";s:16:"pagination_limit";s:1:"5";s:12:"active_class";s:24:"pagination__link_current";s:11:"button_list";s:36:"first,first-more,main,last-more,last";s:17:"first_button_name";s:5:"First";s:18:"first_button_limit";s:1:"3";s:19:"first_button_number";s:1:"1";s:22:"first-more_button_name";s:3:"...";s:23:"first-more_button_limit";s:1:"4";s:16:"prev_button_name";s:4:"Prev";s:17:"prev_button_limit";s:1:"1";s:21:"prev-more_button_name";s:3:"...";s:22:"prev-more_button_limit";s:1:"1";s:21:"next-more_button_name";s:3:"...";s:22:"next-more_button_limit";s:1:"1";s:16:"next_button_name";s:4:"Next";s:17:"next_button_limit";s:1:"1";s:21:"last-more_button_name";s:3:"...";s:22:"last-more_button_limit";s:1:"4";s:16:"last_button_name";s:4:"Last";s:17:"last_button_limit";s:1:"3";s:18:"last_button_number";s:1:"1";}s:9:"BrandList";a:0:{}s:29:"CategoryPage MainCategoryPage";a:5:{s:4:"slug";s:20:"{{ :main_category }}";s:13:"slug_required";s:1:"1";s:15:"smart_url_check";s:1:"0";s:12:"has_wildcard";s:1:"0";s:10:"skip_error";s:1:"0";}}}