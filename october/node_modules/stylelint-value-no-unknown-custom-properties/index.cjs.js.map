{"version":3,"file":"index.cjs.js","sources":["lib/get-custom-properties-from-root.js","lib/get-custom-properties-from-imports.js","lib/rule-name.js","lib/messages.js","lib/validate-decl.js","lib/validate-result.js","index.js"],"sourcesContent":["// return custom selectors from the css root, conditionally removing them\nexport default root => {\n\t// initialize custom selectors\n\tconst customProperties = {};\n\n\t// for each custom property declaration\n\troot.walkDecls(customPropertyRegExp, decl => {\n\t\tconst { prop } = decl;\n\n\t\t// write the parsed value to the custom property\n\t\tcustomProperties[prop] = decl.value;\n\t});\n\n\t// return all custom properties, preferring :root properties over html properties\n\treturn customProperties;\n};\n\n// match custom properties\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n","import fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\nimport getCustomPropertiesFromRoot from './get-custom-properties-from-root';\n\n/* Get Custom Properties from CSS File\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromCSSFile(from) {\n\tconst css = await readFile(from);\n\tconst root = postcss.parse(css, { from });\n\n\treturn getCustomPropertiesFromRoot(root);\n}\n\n/* Get Custom Properties from Object\n/* ========================================================================== */\n\nfunction getCustomPropertiesFromObject(object) {\n\tconst customProperties = Object.assign(\n\t\t{},\n\t\tObject(object).customProperties,\n\t\tObject(object)['custom-properties']\n\t);\n\n\treturn customProperties;\n}\n\n/* Get Custom Properties from JSON file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSONFile(from) {\n\tconst object = await readJSON(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from JS file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSFile(from) {\n\tconst object = await import(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from Sources\n/* ========================================================================== */\n\nexport default function getCustomPropertiesFromSources(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with Custom Properties\n\t\tif (opts.customProperties || opts['custom-properties']) {\n\t\t\treturn opts\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = path.resolve(String(opts.from || ''));\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customProperties, source) => {\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'css') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromObject(await source));\n\t}, {});\n}\n\n/* Promise-ified utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","export default 'csstools/value-no-unknown-custom-properties';\n","import stylelint from 'stylelint';\nimport ruleName from './rule-name';\n\nexport default stylelint.utils.ruleMessages(ruleName, {\n\tunexpected: (name, prop) => `Unexpected custom property \"${name}\" inside declaration \"${prop}\".`,\n});\n","import stylelint from 'stylelint';\nimport valueParser from 'postcss-values-parser';\nimport ruleName from './rule-name';\nimport messages from './messages';\n\n// validate css declarations\nexport default (decl, { result, customProperties }) => {\n\tconst valueAST = valueParser(decl.value).parse();\n\n\tvalidateValueAST(valueAST, { result, customProperties, decl });\n};\n\n// validate a value ast\nconst validateValueAST = (ast, { result, customProperties, decl }) => {\n\tif (Object(ast.nodes).length) {\n\t\tast.nodes.forEach(node => {\n\t\t\tif (isVarFunction(node)) {\n\t\t\t\tconst [propertyNode, comma, ...fallbacks] = node.nodes.slice(1, -1); // eslint-disable-line no-unused-vars\n\t\t\t\tconst propertyName = String(propertyNode);\n\n\t\t\t\tif (propertyName in customProperties) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// conditionally test fallbacks\n\t\t\t\tif (fallbacks.length) {\n\t\t\t\t\tvalidateValueAST({ nodes: fallbacks.filter(isVarFunction) }, { result, customProperties, decl });\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// report unknown custom properties\n\t\t\t\tstylelint.utils.report({\n\t\t\t\t\tmessage: messages.unexpected(propertyName, decl.prop),\n\t\t\t\t\tnode: decl,\n\t\t\t\t\tresult,\n\t\t\t\t\truleName,\n\t\t\t\t\tword: String(propertyNode)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalidateValueAST(node, { result, customProperties, decl });\n\t\t\t}\n\t\t});\n\t}\n};\n\n// match var() functions\nconst varRegExp = /^var$/i;\n\n// whether the node is a var() function\nconst isVarFunction = node => node.type === 'func' && varRegExp.test(node.value) && Object(node.nodes).length > 0;\n","import validateDecl from './validate-decl';\n\n// validate the css root\nexport default (result, customProperties) => {\n\t// validate each declaration\n\tresult.root.walkDecls(decl => {\n\t\tif (hasCustomPropertyReference(decl)) {\n\t\t\tvalidateDecl(decl, { result, customProperties });\n\t\t}\n\t});\n};\n\n// match custom property inclusions\nconst customPropertyReferenceRegExp = /(^|[^\\w-])var\\([\\W\\w]+\\)/;\n\n// whether a declaration references a custom property\nconst hasCustomPropertyReference = decl => customPropertyReferenceRegExp.test(decl.value);\n\n","import stylelint from 'stylelint';\nimport getCustomPropertiesFromRoot from './lib/get-custom-properties-from-root';\nimport getCustomPropertiesFromImports from './lib/get-custom-properties-from-imports';\nimport validateResult from './lib/validate-result';\nimport ruleName from './lib/rule-name';\n\nexport default stylelint.createPlugin(ruleName, (method, opts) => {\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// promise any custom selectors are imported\n\tconst customPropertiesPromise = isMethodEnabled(method)\n\t\t? getCustomPropertiesFromImports(importFrom)\n\t: {};\n\n\treturn async (root, result) => {\n\t\t// validate the method\n\t\tconst isMethodValid = stylelint.utils.validateOptions(result, ruleName, {\n\t\t\tactual: method,\n\t\t\tpossible() {\n\t\t\t\treturn isMethodEnabled(method) || isMethodDisabled(method);\n\t\t\t}\n\t\t});\n\n\t\tif (isMethodValid && isMethodEnabled(method)) {\n\t\t\t// all custom properties from the file and imports\n\t\t\tconst customProperties = Object.assign(\n\t\t\t\tawait customPropertiesPromise,\n\t\t\t\tgetCustomPropertiesFromRoot(root)\n\t\t\t);\n\n\t\t\t// validate the css root\n\t\t\tvalidateResult(result, customProperties);\n\t\t}\n\t};\n});\n\nexport { ruleName }\n\nconst isMethodEnabled = method => method === true;\nconst isMethodDisabled = method => method === null || method === false;\n"],"names":["root","customProperties","walkDecls","customPropertyRegExp","decl","prop","value","getCustomPropertiesFromCSSFile","from","css","readFile","postcss","parse","getCustomPropertiesFromRoot","getCustomPropertiesFromObject","object","Object","assign","getCustomPropertiesFromJSONFile","readJSON","getCustomPropertiesFromJSFile","getCustomPropertiesFromSources","sources","map","source","Promise","Function","opts","String","path","resolve","type","extname","slice","toLowerCase","reduce","reject","fs","error","result","JSON","stylelint","utils","ruleMessages","ruleName","unexpected","name","valueAST","valueParser","validateValueAST","ast","nodes","length","forEach","node","isVarFunction","propertyNode","comma","fallbacks","propertyName","filter","report","message","messages","word","varRegExp","test","hasCustomPropertyReference","validateDecl","customPropertyReferenceRegExp","createPlugin","method","importFrom","concat","customPropertiesPromise","isMethodEnabled","getCustomPropertiesFromImports","isMethodValid","validateOptions","actual","possible","isMethodDisabled","validateResult"],"mappings":"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"}