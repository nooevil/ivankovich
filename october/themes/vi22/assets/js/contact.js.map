{"version":3,"sources":["webpack:///./themes/lovata-shopaholic-sneakers/pages/contact.js","webpack:///./themes/lovata-shopaholic-sneakers/js/constant.js","webpack:///./themes/lovata-shopaholic-sneakers/partials/content/contact/contact-map.js","webpack:///./node_modules/load-google-maps-api/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","errorText","message","gmapKeyNotFound","gmapCoordinatesNotFound","missingValue","checkbox","radio","select","select-multiple","default","patternMismatch","email","url","number","color","date","time","month","outOfRange","over","under","wrongLength","$","load_google_maps_api__WEBPACK_IMPORTED_MODULE_0__","load_google_maps_api__WEBPACK_IMPORTED_MODULE_0___default","n","_js_constant__WEBPACK_IMPORTED_MODULE_1__","constructor","this","mapSelector","idSelector","coordinatesSelector","markerPath","maxWidth","handler","window","addEventListener","initMap","map","document","querySelector","key","getAttribute","Error","coordinates","split","length","drawMap","arguments","undefined","loadGoogleMapsApi","then","googleMaps","center","lat","parseFloat","lng","Map","zoom","marker","Marker","position","icon","request","update","content/contact/contact-popup","success","res","content","infowindow","InfoWindow","open","addListener","catch","error","CALLBACK_NAME","OPTIONS_KEYS","promise","module","exports","options","Promise","resolve","reject","timeoutId","setTimeout","timeout","clearTimeout","google","maps","scriptElement","createElement","params","forEach","push","libraries","join","src","body","appendChild"],"mappings":"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","file":"/js/contact.js","sourcesContent":["import '../partials/content/contact/contact-map';\n","export const ariaLabelText = {\n  drawerOpen: 'Open sidebar menu',\n  drawerClose: 'Close sidebar menu',\n};\n\nexport const errorText = {\n  gmapKeyNotFound: 'API Key was not found',\n  gmapCoordinatesNotFound: 'Coordinate was not found. Pls check data-coordinates attribute',\n};\n\nexport const message = {\n  missingValue: {\n    checkbox: 'This field is required.',\n    radio: 'Please select a value.',\n    select: 'Please select a value.',\n    'select-multiple': 'Please select at least one value.',\n    default: 'Please fill out this field.',\n  },\n  patternMismatch: {\n    email: 'Please enter a valid email address.',\n    url: 'Please enter a URL.',\n    number: 'Please enter a number',\n    color: 'Please match the following format: #rrggbb',\n    date: 'Please use the YYYY-MM-DD format',\n    time: 'Please use the 24-hour time format. Ex. 23:00',\n    month: 'Please use the YYYY-MM format',\n    default: 'Please match the requested format.',\n  },\n  outOfRange: {\n    over: 'Please select a value that is no more than {max}.',\n    under: 'Please select a value that is no less than {min}.',\n  },\n  wrongLength: {\n    over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n    under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n  },\n};\n","import loadGoogleMapsApi from 'load-google-maps-api';\nimport { errorText } from '../../../js/constant';\n\nexport default new class ContactMap {\n  constructor() {\n    this.mapSelector = 'map';\n    this.idSelector = 'data-api-key';\n    this.coordinatesSelector = 'data-coordinates';\n\n    this.markerPath = 'data-marker-path';\n    this.maxWidth = 280;\n\n    this.handler();\n  }\n\n  handler() {\n    window.addEventListener('load', () => {\n      this.initMap();\n    });\n  }\n\n  initMap() {\n    const map = document.querySelector(`.${this.mapSelector}`);\n\n    if (!map) return;\n\n    const key = map.getAttribute(this.idSelector);\n\n    if (!key) {\n      throw new Error(errorText.gmapKeyNotFound);\n    }\n\n    const coordinates = map.getAttribute(this.coordinatesSelector).split(',');\n\n    if (!coordinates.length) {\n      throw new Error(errorText.gmapCoordinatesNotFound);\n    }\n\n    const markerPath = map.getAttribute(this.markerPath);\n\n    this.drawMap(key, coordinates, markerPath);\n  }\n\n  drawMap(key, coordinates = [0, 0], markerPath) {\n    loadGoogleMapsApi({ key }).then((googleMaps) => {\n      const center = {\n        lat: parseFloat(coordinates[0]),\n        lng: parseFloat(coordinates[1]),\n      };\n\n      const map = new googleMaps.Map(document.querySelector(`.${this.mapSelector}`), {\n        center,\n        zoom: 14,\n      });\n      const marker = new googleMaps.Marker({ position: center, map, icon: markerPath });\n\n      $.request('onAjax', {\n        update: { 'content/contact/contact-popup': `.${this.mapSelector}` },\n        success: (res) => {\n          const content = res['content/contact/contact-popup'];\n          const infowindow = new googleMaps.InfoWindow({ content, maxWidth: this.maxWidth });\n\n          infowindow.open(map, marker);\n          marker.addListener('click', () => {\n            infowindow.open(map, marker);\n          });\n        },\n      });\n    }).catch((error) => { throw new Error(error); });\n  }\n}();\n","var CALLBACK_NAME = '__googleMapsApiOnLoadCallback'\n\nvar OPTIONS_KEYS = ['channel', 'client', 'key', 'language', 'region', 'v']\n\nvar promise = null\n\nmodule.exports = function (options) {\n  options = options || {}\n\n  if (!promise) {\n    promise = new Promise(function (resolve, reject) {\n      // Reject the promise after a timeout\n      var timeoutId = setTimeout(function () {\n        window[CALLBACK_NAME] = function () {} // Set the on load callback to a no-op\n        reject(new Error('Could not load the Google Maps API'))\n      }, options.timeout || 10000)\n\n      // Hook up the on load callback\n      window[CALLBACK_NAME] = function () {\n        if (timeoutId !== null) {\n          clearTimeout(timeoutId)\n        }\n        resolve(window.google.maps)\n        delete window[CALLBACK_NAME]\n      }\n\n      // Prepare the `script` tag to be inserted into the page\n      var scriptElement = document.createElement('script')\n      var params = ['callback=' + CALLBACK_NAME]\n      OPTIONS_KEYS.forEach(function (key) {\n        if (options[key]) {\n          params.push(key + '=' + options[key])\n        }\n      })\n      if (options.libraries && options.libraries.length) {\n        params.push('libraries=' + options.libraries.join(','))\n      }\n      scriptElement.src =\n        'https://maps.googleapis.com/maps/api/js?' + params.join('&')\n\n      // Insert the `script` tag\n      document.body.appendChild(scriptElement)\n    })\n  }\n\n  return promise\n}\n"],"sourceRoot":""}