{"version":3,"sources":["webpack:///./node_modules/load-google-maps-api/index.js","webpack:///./themes/lovata-shopaholic-sneakers/js/constant.js","webpack:///./themes/lovata-shopaholic-sneakers/pages/contact.js","webpack:///./themes/lovata-shopaholic-sneakers/partials/content/contact/contact-map.js"],"names":["ariaLabelText","drawerOpen","drawerClose","errorText","gmapKeyNotFound","gmapCoordinatesNotFound","message","missingValue","checkbox","radio","select","default","patternMismatch","email","url","number","color","date","time","month","outOfRange","over","under","wrongLength","ContactMap","constructor","mapSelector","idSelector","coordinatesSelector","markerPath","maxWidth","handler","window","addEventListener","initMap","map","document","querySelector","key","getAttribute","Error","coordinates","split","length","drawMap","loadGoogleMapsApi","then","googleMaps","center","lat","parseFloat","lng","Map","zoom","marker","Marker","position","icon","$","request","update","success","res","content","infowindow","InfoWindow","open","addListener","catch","error"],"mappings":"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","file":"/js/contact.js","sourcesContent":["var CALLBACK_NAME = '__googleMapsApiOnLoadCallback'\n\nvar OPTIONS_KEYS = ['channel', 'client', 'key', 'language', 'region', 'v']\n\nvar promise = null\n\nmodule.exports = function (options) {\n  options = options || {}\n\n  if (!promise) {\n    promise = new Promise(function (resolve, reject) {\n      // Reject the promise after a timeout\n      var timeoutId = setTimeout(function () {\n        window[CALLBACK_NAME] = function () {} // Set the on load callback to a no-op\n        reject(new Error('Could not load the Google Maps API'))\n      }, options.timeout || 10000)\n\n      // Hook up the on load callback\n      window[CALLBACK_NAME] = function () {\n        if (timeoutId !== null) {\n          clearTimeout(timeoutId)\n        }\n        resolve(window.google.maps)\n        delete window[CALLBACK_NAME]\n      }\n\n      // Prepare the `script` tag to be inserted into the page\n      var scriptElement = document.createElement('script')\n      var params = ['callback=' + CALLBACK_NAME]\n      OPTIONS_KEYS.forEach(function (key) {\n        if (options[key]) {\n          params.push(key + '=' + options[key])\n        }\n      })\n      if (options.libraries && options.libraries.length) {\n        params.push('libraries=' + options.libraries.join(','))\n      }\n      scriptElement.src =\n        'https://maps.googleapis.com/maps/api/js?' + params.join('&')\n\n      // Insert the `script` tag\n      document.body.appendChild(scriptElement)\n    })\n  }\n\n  return promise\n}\n","export const ariaLabelText = {\n  drawerOpen: 'Open sidebar menu',\n  drawerClose: 'Close sidebar menu',\n};\n\nexport const errorText = {\n  gmapKeyNotFound: 'API Key was not found',\n  gmapCoordinatesNotFound: 'Coordinate was not found. Pls check data-coordinates attribute',\n};\n\nexport const message = {\n  missingValue: {\n    checkbox: 'This field is required.',\n    radio: 'Please select a value.',\n    select: 'Please select a value.',\n    'select-multiple': 'Please select at least one value.',\n    default: 'Please fill out this field.',\n  },\n  patternMismatch: {\n    email: 'Please enter a valid email address.',\n    url: 'Please enter a URL.',\n    number: 'Please enter a number',\n    color: 'Please match the following format: #rrggbb',\n    date: 'Please use the YYYY-MM-DD format',\n    time: 'Please use the 24-hour time format. Ex. 23:00',\n    month: 'Please use the YYYY-MM format',\n    default: 'Please match the requested format.',\n  },\n  outOfRange: {\n    over: 'Please select a value that is no more than {max}.',\n    under: 'Please select a value that is no less than {min}.',\n  },\n  wrongLength: {\n    over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n    under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n  },\n};\n","import '../partials/content/contact/contact-map';\n","import loadGoogleMapsApi from 'load-google-maps-api';\nimport { errorText } from '../../../js/constant';\n\nexport default new class ContactMap {\n  constructor() {\n    this.mapSelector = 'map';\n    this.idSelector = 'data-api-key';\n    this.coordinatesSelector = 'data-coordinates';\n\n    this.markerPath = 'data-marker-path';\n    this.maxWidth = 280;\n\n    this.handler();\n  }\n\n  handler() {\n    window.addEventListener('load', () => {\n      this.initMap();\n    });\n  }\n\n  initMap() {\n    const map = document.querySelector(`.${this.mapSelector}`);\n\n    if (!map) return;\n\n    const key = map.getAttribute(this.idSelector);\n\n    if (!key) {\n      throw new Error(errorText.gmapKeyNotFound);\n    }\n\n    const coordinates = map.getAttribute(this.coordinatesSelector).split(',');\n\n    if (!coordinates.length) {\n      throw new Error(errorText.gmapCoordinatesNotFound);\n    }\n\n    const markerPath = map.getAttribute(this.markerPath);\n\n    this.drawMap(key, coordinates, markerPath);\n  }\n\n  drawMap(key, coordinates = [0, 0], markerPath) {\n    loadGoogleMapsApi({ key }).then((googleMaps) => {\n      const center = {\n        lat: parseFloat(coordinates[0]),\n        lng: parseFloat(coordinates[1]),\n      };\n\n      const map = new googleMaps.Map(document.querySelector(`.${this.mapSelector}`), {\n        center,\n        zoom: 14,\n      });\n      const marker = new googleMaps.Marker({ position: center, map, icon: markerPath });\n\n      $.request('onAjax', {\n        update: { 'content/contact/contact-popup': `.${this.mapSelector}` },\n        success: (res) => {\n          const content = res['content/contact/contact-popup'];\n          const infowindow = new googleMaps.InfoWindow({ content, maxWidth: this.maxWidth });\n\n          infowindow.open(map, marker);\n          marker.addListener('click', () => {\n            infowindow.open(map, marker);\n          });\n        },\n      });\n    }).catch((error) => { throw new Error(error); });\n  }\n}();\n"],"sourceRoot":""}